/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package view;

import java.awt.GridLayout;
import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import java.text.SimpleDateFormat;
import java.text.ParseException;
import javax.swing.table.DefaultTableCellRenderer;
import java.util.Date;
import javax.swing.JFormattedTextField;


/**
 *
 * @author frank
 */
public class AltView extends javax.swing.JFrame {

    /**
     * Creates new form AltView
     */
    public AltView() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jToggleButton5 = new javax.swing.JToggleButton();
        jToggleButton6 = new javax.swing.JToggleButton();
        jToggleButton1 = new javax.swing.JToggleButton();
        jToggleButton2 = new javax.swing.JToggleButton();
        jToggleButton3 = new javax.swing.JToggleButton();
        jToggleButton4 = new javax.swing.JToggleButton();
        jToggleButton7 = new javax.swing.JToggleButton();
        jToggleButton9 = new javax.swing.JToggleButton();
        jToggleButton10 = new javax.swing.JToggleButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jToggleButton11 = new javax.swing.JToggleButton();
        jToggleButton8 = new javax.swing.JToggleButton();
        jToggleButton12 = new javax.swing.JToggleButton();
        jToggleButton13 = new javax.swing.JToggleButton();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 48)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("TIExpert");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 10, 227, -1));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Escolha uma opção");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 130, -1, -1));

        jToggleButton5.setBackground(new java.awt.Color(102, 255, 102));
        jToggleButton5.setText("Visualizar");
        jToggleButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton5ActionPerformed(evt);
            }
        });
        getContentPane().add(jToggleButton5, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 270, 150, 40));

        jToggleButton6.setBackground(new java.awt.Color(102, 255, 102));
        jToggleButton6.setText("Visualizar");
        jToggleButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton6ActionPerformed(evt);
            }
        });
        getContentPane().add(jToggleButton6, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 270, 153, 40));

        jToggleButton1.setText("Voltar");
        jToggleButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jToggleButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 30, 100, 30));

        jToggleButton2.setBackground(new java.awt.Color(255, 51, 51));
        jToggleButton2.setForeground(new java.awt.Color(255, 255, 255));
        jToggleButton2.setText("Excluir");
        jToggleButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jToggleButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 340, 150, 37));

        jToggleButton3.setBackground(new java.awt.Color(102, 255, 102));
        jToggleButton3.setText("Visualizar");
        jToggleButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton3ActionPerformed(evt);
            }
        });
        getContentPane().add(jToggleButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 270, 151, 40));

        jToggleButton4.setBackground(new java.awt.Color(102, 255, 102));
        jToggleButton4.setText("Visualizar");
        jToggleButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton4ActionPerformed(evt);
            }
        });
        getContentPane().add(jToggleButton4, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 270, 160, 40));

        jToggleButton7.setBackground(new java.awt.Color(255, 51, 51));
        jToggleButton7.setForeground(new java.awt.Color(255, 255, 255));
        jToggleButton7.setText("Excluir");
        jToggleButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton7ActionPerformed(evt);
            }
        });
        getContentPane().add(jToggleButton7, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 340, 153, 37));

        jToggleButton9.setBackground(new java.awt.Color(255, 51, 51));
        jToggleButton9.setForeground(new java.awt.Color(255, 255, 255));
        jToggleButton9.setText("Excluir");
        jToggleButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton9ActionPerformed(evt);
            }
        });
        getContentPane().add(jToggleButton9, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 340, 150, 37));

        jToggleButton10.setBackground(new java.awt.Color(255, 51, 51));
        jToggleButton10.setForeground(new java.awt.Color(255, 255, 255));
        jToggleButton10.setText("Excluir");
        jToggleButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton10ActionPerformed(evt);
            }
        });
        getContentPane().add(jToggleButton10, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 340, 160, 37));

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Serviços");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 220, -1, -1));

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Orçamentos");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 220, -1, -1));

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Pagamentos");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 220, -1, -1));

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Clientes");
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 220, -1, -1));

        jToggleButton11.setBackground(new java.awt.Color(255, 153, 51));
        jToggleButton11.setText("Editar");
        jToggleButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton11ActionPerformed(evt);
            }
        });
        getContentPane().add(jToggleButton11, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 410, 150, 40));

        jToggleButton8.setBackground(new java.awt.Color(255, 153, 51));
        jToggleButton8.setText("Editar");
        jToggleButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton8ActionPerformed(evt);
            }
        });
        getContentPane().add(jToggleButton8, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 410, 150, 40));

        jToggleButton12.setBackground(new java.awt.Color(255, 153, 51));
        jToggleButton12.setText("Editar");
        jToggleButton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton12ActionPerformed(evt);
            }
        });
        getContentPane().add(jToggleButton12, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 410, 160, 40));

        jToggleButton13.setBackground(new java.awt.Color(255, 153, 51));
        jToggleButton13.setText("Editar");
        jToggleButton13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton13ActionPerformed(evt);
            }
        });
        getContentPane().add(jToggleButton13, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 410, 150, 40));

        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/view/Imagens/IMA02.jpeg"))); // NOI18N
        jLabel7.setAlignmentY(0.0F);
        jLabel7.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jLabel7.setMaximumSize(new java.awt.Dimension(1000, 600));
        jLabel7.setMinimumSize(new java.awt.Dimension(1000, 600));
        jLabel7.setPreferredSize(new java.awt.Dimension(900, 600));
        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(-50, -140, 870, 650));

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 48)); // NOI18N
        jLabel8.setText("TIExpert");
        getContentPane().add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 10, 227, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jToggleButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton1ActionPerformed
        this.dispose();
        LoginView voltar = new LoginView();
        voltar.setVisible(true);
    }//GEN-LAST:event_jToggleButton1ActionPerformed

    private void jToggleButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton5ActionPerformed
                try {
            // Configurar a conexão com o banco de dados
            String url = "jdbc:mysql://localhost:3306/banco?user=root&password=";

            Connection conexao = DriverManager.getConnection(url);

            // Criar uma consulta SQL para selecionar todos os clientes
            String sql = "SELECT * FROM cliente";
            Statement statement = conexao.createStatement();
            ResultSet resultado = statement.executeQuery(sql);

            // Criar um modelo de tabela para exibir os resultados
            DefaultTableModel tableModel = new DefaultTableModel();
            JTable tabelaClientes = new JTable(tableModel);

            // Adicionar as colunas à tabela
            tableModel.addColumn("CPF");
            tableModel.addColumn("nome");
            tableModel.addColumn("senha");
            tableModel.addColumn("telefone");
            tableModel.addColumn("endereco");
            tableModel.addColumn("email");

            // Preencher a tabela com os resultados da consulta
            while (resultado.next()) {
                String CPF = resultado.getString("CPF");
                String nome = resultado.getString("nome");
                String senha = resultado.getString("senha");
                String telefone = resultado.getString("telefone");
                String endereco = resultado.getString("endereco");
                String email = resultado.getString("email");
                // Preencha outras colunas conforme necessário

                tableModel.addRow(new Object[]{CPF, nome, senha, telefone, endereco, email/* Outros campos... */});
            }

            // Exibir a tabela em uma janela de diálogo
            JScrollPane scrollPane = new JScrollPane(tabelaClientes);
            JOptionPane.showMessageDialog(this, scrollPane, "Clientes Cadastrados", JOptionPane.PLAIN_MESSAGE);

            // Fechar recursos
            resultado.close();
            statement.close();
            conexao.close();
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Erro ao recuperar clientes.", "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jToggleButton5ActionPerformed

    private void jToggleButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton2ActionPerformed
      String input = JOptionPane.showInputDialog("Digite o CPF do cliente a ser excluído:");

    if (input != null) {
        try {
            String cpfClienteParaExcluir = input; // CPF é uma string

            // Configurar a conexão com o banco de dados
            String url = "jdbc:mysql://localhost:3306/banco?user=root&password=";

            Connection conexao = DriverManager.getConnection(url);

            // Crie a instrução SQL para excluir o cliente com base no CPF
            String sql = "DELETE FROM cliente WHERE CPF = ?";
            PreparedStatement statement = conexao.prepareStatement(sql);
            statement.setString(1, cpfClienteParaExcluir);

            // Execute a instrução SQL
            int linhasAfetadas = statement.executeUpdate();

            if (linhasAfetadas > 0) {
                JOptionPane.showMessageDialog(this, "Cliente excluído com sucesso!");
            } else {
                JOptionPane.showMessageDialog(this, "Nenhum cliente foi excluído. Verifique o CPF do cliente.");
            }

            // Feche os recursos
            statement.close();
            conexao.close();
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Erro ao excluir cliente.", "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }
    }//GEN-LAST:event_jToggleButton2ActionPerformed

    private void jToggleButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton6ActionPerformed
                       try {
            // Configurar a conexão com o banco de dados
            String url = "jdbc:mysql://localhost:3306/banco?user=root&password=";

            Connection conexao = DriverManager.getConnection(url);

            // Criar uma consulta SQL para selecionar todos os clientes
            String sql = "SELECT * FROM servico";
            Statement statement = conexao.createStatement();
            ResultSet resultado = statement.executeQuery(sql);

            // Criar um modelo de tabela para exibir os resultados
            DefaultTableModel tableModel = new DefaultTableModel();
            JTable tabelaServicos = new JTable(tableModel);

            // Adicionar as colunas à tabela
            tableModel.addColumn("ID_servico");
            tableModel.addColumn("descricao");
            tableModel.addColumn("data_servico");
            tableModel.addColumn("CPF");

            // Preencher a tabela com os resultados da consulta
            while (resultado.next()) {
    int ID_servico = resultado.getInt("ID_servico");
    String descricao = resultado.getString("descricao");
    Date data_servico = resultado.getDate("data_servico");
    String CPF = resultado.getString("CPF");

    SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
    String data_servicoFormatada = (data_servico != null) ? sdf.format(data_servico) : "";

    // Preencha outras colunas conforme necessário

    tableModel.addRow(new Object[]{ID_servico, descricao, data_servicoFormatada, CPF/* Outros campos... */});
}

            // Exibir a tabela em uma janela de diálogo
            JScrollPane scrollPane = new JScrollPane(tabelaServicos);
            JOptionPane.showMessageDialog(this, scrollPane, "Serviços Cadastrados", JOptionPane.PLAIN_MESSAGE);
            // Configure um DefaultTableCellRenderer para formatar a data
            DefaultTableCellRenderer dateRenderer = new DefaultTableCellRenderer() {
                SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");

                @Override
                public void setValue(Object value) {
                    if (value instanceof Date) {
                        setText(sdf.format(value));
                    }
                    super.setValue(value);
                }
            };

            // Aplique o renderer para a coluna "data_servico" da tabela
            tabelaServicos.getColumnModel().getColumn(2).setCellRenderer(dateRenderer);

            // Fechar recursos
            resultado.close();
            statement.close();
            conexao.close();
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Erro ao recuperar serviços.", "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jToggleButton6ActionPerformed

    private void jToggleButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton3ActionPerformed
                        try {
            // Configurar a conexão com o banco de dados
            String url = "jdbc:mysql://localhost:3306/banco?user=root&password=";

            Connection conexao = DriverManager.getConnection(url);

            // Criar uma consulta SQL para selecionar todos os clientes
            String sql = "SELECT * FROM orcamento";
            Statement statement = conexao.createStatement();
            ResultSet resultado = statement.executeQuery(sql);

            // Criar um modelo de tabela para exibir os resultados
            DefaultTableModel tableModel = new DefaultTableModel();
            JTable tabelaServicos = new JTable(tableModel);

            // Adicionar as colunas à tabela
            tableModel.addColumn("ID_orcamento");
            tableModel.addColumn("valor_orcamento");
            tableModel.addColumn("data_orcamento");
            tableModel.addColumn("ID_servico");

            // Preencher a tabela com os resultados da consulta
            while (resultado.next()) {
                int ID_orcamento = resultado.getInt("ID_orcamento");
                BigDecimal valor_orcamento = resultado.getBigDecimal("valor_orcamento");
                Date data_orcamento = resultado.getDate("data_orcamento");
                int ID_servico = resultado.getInt("ID_servico");
                SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
                String data_orcamentoFormatada = (data_orcamento != null) ? sdf.format(data_orcamento) : "";

                // Preencha outras colunas conforme necessário

                tableModel.addRow(new Object[]{ID_orcamento, valor_orcamento, data_orcamentoFormatada, ID_servico/* Outros campos... */});
            }

            // Exibir a tabela em uma janela de diálogo
            JScrollPane scrollPane = new JScrollPane(tabelaServicos);
            JOptionPane.showMessageDialog(this, scrollPane, "Orçamentos feitos", JOptionPane.PLAIN_MESSAGE);
            DefaultTableCellRenderer dateRenderer = new DefaultTableCellRenderer() {
                SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");

                @Override
                public void setValue(Object value) {
                    if (value instanceof Date) {
                        setText(sdf.format(value));
                    }
                    super.setValue(value);
                }
            };
            tabelaServicos.getColumnModel().getColumn(2).setCellRenderer(dateRenderer);
            // Fechar recursos
            resultado.close();
            statement.close();
            conexao.close();
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Erro ao recuperar orçamentos.", "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jToggleButton3ActionPerformed

    private void jToggleButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton4ActionPerformed
                               try {
            // Configurar a conexão com o banco de dados
            String url = "jdbc:mysql://localhost:3306/banco?user=root&password=";

            Connection conexao = DriverManager.getConnection(url);

            // Criar uma consulta SQL para selecionar todos os clientes
            String sql = "SELECT * FROM pagamento";
            Statement statement = conexao.createStatement();
            ResultSet resultado = statement.executeQuery(sql);

            // Criar um modelo de tabela para exibir os resultados
            DefaultTableModel tableModel = new DefaultTableModel();
            JTable tabelaServicos = new JTable(tableModel);

            // Adicionar as colunas à tabela
            tableModel.addColumn("ID_pagamento");
            tableModel.addColumn("data_pagamento");
            tableModel.addColumn("comprovante");
            tableModel.addColumn("ID_orcamento");

            // Preencher a tabela com os resultados da consulta
            while (resultado.next()) {
                int ID_pagamento = resultado.getInt("ID_pagamento");
                Date data_pagamento = resultado.getDate("data_pagamento");
                String comprovante = resultado.getString("comprovante");
                int ID_orcamento = resultado.getInt("ID_orcamento");
                SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
                String data_pagamentoFormatada = (data_pagamento != null) ? sdf.format(data_pagamento) : "";

                // Preencha outras colunas conforme necessário

                tableModel.addRow(new Object[]{ID_pagamento, data_pagamentoFormatada, comprovante, ID_orcamento/* Outros campos... */});
            }

            // Exibir a tabela em uma janela de diálogo
            JScrollPane scrollPane = new JScrollPane(tabelaServicos);
            JOptionPane.showMessageDialog(this, scrollPane, "Pagamentos realizados", JOptionPane.PLAIN_MESSAGE);
            DefaultTableCellRenderer dateRenderer = new DefaultTableCellRenderer() {
                SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");

                @Override
                public void setValue(Object value) {
                    if (value instanceof Date) {
                        setText(sdf.format(value));
                    }
                    super.setValue(value);
                }
            };
            tabelaServicos.getColumnModel().getColumn(2).setCellRenderer(dateRenderer);
            // Fechar recursos
            resultado.close();
            statement.close();
            conexao.close();
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Erro ao recuperar pagamentos.", "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jToggleButton4ActionPerformed

    private void jToggleButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton7ActionPerformed
              String input = JOptionPane.showInputDialog("Digite o ID do serviço a ser excluído:");

    if (input != null) {
        try {
            String cpfClienteParaExcluir = input; // CPF é uma string

            // Configurar a conexão com o banco de dados
            String url = "jdbc:mysql://localhost:3306/banco?user=root&password=";

            Connection conexao = DriverManager.getConnection(url);

            // Crie a instrução SQL para excluir o cliente com base no CPF
            String sql = "DELETE FROM servico WHERE ID_servico = ?";
            PreparedStatement statement = conexao.prepareStatement(sql);
            statement.setString(1, cpfClienteParaExcluir);

            // Execute a instrução SQL
            int linhasAfetadas = statement.executeUpdate();

            if (linhasAfetadas > 0) {
                JOptionPane.showMessageDialog(this, "Serviço excluído com sucesso!");
            } else {
                JOptionPane.showMessageDialog(this, "Nenhum serviço foi excluído. Verifique o ID do serviço.");
            }

            // Feche os recursos
            statement.close();
            conexao.close();
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Erro ao excluir serviço.", "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }
    }//GEN-LAST:event_jToggleButton7ActionPerformed

    private void jToggleButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton9ActionPerformed
                      String input = JOptionPane.showInputDialog("Digite o ID do orçamento a ser excluído:");

    if (input != null) {
        try {
            String cpfClienteParaExcluir = input; // CPF é uma string

            // Configurar a conexão com o banco de dados
            String url = "jdbc:mysql://localhost:3306/banco?user=root&password=";

            Connection conexao = DriverManager.getConnection(url);

            // Crie a instrução SQL para excluir o cliente com base no CPF
            String sql = "DELETE FROM orcamento WHERE ID_orcamento = ?";
            PreparedStatement statement = conexao.prepareStatement(sql);
            statement.setString(1, cpfClienteParaExcluir);

            // Execute a instrução SQL
            int linhasAfetadas = statement.executeUpdate();

            if (linhasAfetadas > 0) {
                JOptionPane.showMessageDialog(this, "Orçamento excluído com sucesso!");
            } else {
                JOptionPane.showMessageDialog(this, "Nenhum orçamento foi excluído. Verifique o ID do orçamento.");
            }

            // Feche os recursos
            statement.close();
            conexao.close();
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Erro ao excluir orçamento.", "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }
    }//GEN-LAST:event_jToggleButton9ActionPerformed

    private void jToggleButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton10ActionPerformed
                      String input = JOptionPane.showInputDialog("Digite o ID do pagamento a ser excluído:");

    if (input != null) {
        try {
            String cpfClienteParaExcluir = input; // CPF é uma string

            // Configurar a conexão com o banco de dados
            String url = "jdbc:mysql://localhost:3306/banco?user=root&password=";

            Connection conexao = DriverManager.getConnection(url);

            // Crie a instrução SQL para excluir o cliente com base no CPF
            String sql = "DELETE FROM pagamento WHERE ID_pagamento = ?";
            PreparedStatement statement = conexao.prepareStatement(sql);
            statement.setString(1, cpfClienteParaExcluir);

            // Execute a instrução SQL
            int linhasAfetadas = statement.executeUpdate();

            if (linhasAfetadas > 0) {
                JOptionPane.showMessageDialog(this, "Pagamento excluído com sucesso!");
            } else {
                JOptionPane.showMessageDialog(this, "Nenhum pagamento foi excluído. Verifique o ID do pagamento.");
            }

            // Feche os recursos
            statement.close();
            conexao.close();
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Erro ao excluir pagamento.", "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }
    }//GEN-LAST:event_jToggleButton10ActionPerformed

    private void jToggleButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton11ActionPerformed
     // Solicite ao usuário o CPF do cliente a ser editado
    String input = JOptionPane.showInputDialog("Digite o CPF do cliente a ser editado:");

    if (input != null) {
        String cpfClienteParaEditar = input; // CPF é uma string

        // Consulte o banco de dados para obter os dados atuais do cliente
        try {
            String url = "jdbc:mysql://localhost:3306/banco?user=root&password=";
            Connection conexao = DriverManager.getConnection(url);
            String sql = "SELECT * FROM cliente WHERE CPF = ?";
            PreparedStatement statement = conexao.prepareStatement(sql);
            statement.setString(1, cpfClienteParaEditar);
            ResultSet resultado = statement.executeQuery();

            if (resultado.next()) {
                // Obtenha os dados atuais do cliente
                String cpf = resultado.getString("CPF");
                String nome = resultado.getString("nome");
                String senha = resultado.getString("senha");
                String telefone = resultado.getString("telefone");
                String endereco = resultado.getString("endereco");
                String email = resultado.getString("email");

                // Exiba uma janela de edição personalizada
                JPanel panel = new JPanel(new GridLayout(6, 2));
                panel.add(new JLabel("CPF:"));
                JTextField cpfField = new JTextField(cpf);
                panel.add(cpfField);
                panel.add(new JLabel("Nome:"));
                JTextField nomeField = new JTextField(nome);
                panel.add(nomeField);
                panel.add(new JLabel("Senha:"));
                JTextField senhaField = new JTextField(senha);
                panel.add(senhaField);
                panel.add(new JLabel("Telefone:"));
                JTextField telefoneField = new JTextField(telefone);
                panel.add(telefoneField);
                panel.add(new JLabel("Endereço:"));
                JTextField enderecoField = new JTextField(endereco);
                panel.add(enderecoField);
                panel.add(new JLabel("E-mail:"));
                JTextField emailField = new JTextField(email);
                panel.add(emailField);

                int result = JOptionPane.showConfirmDialog(null, panel, "Editar Cliente",
                        JOptionPane.OK_CANCEL_OPTION);

                if (result == JOptionPane.OK_OPTION) {
                    // Obtenha os valores editados
                    String novoNome = nomeField.getText();
                    String novaSenha = senhaField.getText();
                    String novoTelefone = telefoneField.getText();
                    String novoEndereco = enderecoField.getText();
                    String novoEmail = emailField.getText();

                    // Crie uma instrução SQL para atualizar os dados do cliente
                    String updateSql = "UPDATE cliente SET nome = ?, senha = ?, telefone = ?, endereco = ?, email = ? WHERE CPF = ?";
                    PreparedStatement updateStatement = conexao.prepareStatement(updateSql);
                    updateStatement.setString(1, novoNome);
                    updateStatement.setString(2, novaSenha);
                    updateStatement.setString(3, novoTelefone);
                    updateStatement.setString(4, novoEndereco);
                    updateStatement.setString(5, novoEmail);
                    updateStatement.setString(6, cpfClienteParaEditar);

                    int linhasAfetadas = updateStatement.executeUpdate();

                    if (linhasAfetadas > 0) {
                        JOptionPane.showMessageDialog(this, "Dados do cliente atualizados com sucesso!");
                    } else {
                        JOptionPane.showMessageDialog(this, "Nenhum cliente foi atualizado. Verifique o CPF do cliente.");
                    }

                    // Feche os recursos
                    updateStatement.close();
                }
            } else {
                JOptionPane.showMessageDialog(this, "Cliente com CPF especificado não encontrado.");
            }

            resultado.close();
            statement.close();
            conexao.close();
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Erro ao editar cliente.", "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }
    }//GEN-LAST:event_jToggleButton11ActionPerformed

    private void jToggleButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton8ActionPerformed
     // Solicite ao usuário o ID do serviço a ser editado
    String input = JOptionPane.showInputDialog("Digite o ID do serviço a ser editado:");

    if (input != null) {
        String idServicoParaEditar = input;

        // Consulte o banco de dados para obter os dados atuais do serviço
        try {
            String url = "jdbc:mysql://localhost:3306/banco?user=root&password=";
            Connection conexao = DriverManager.getConnection(url);
            String sql = "SELECT * FROM servico WHERE ID_servico = ?";
            PreparedStatement statement = conexao.prepareStatement(sql);
            statement.setString(1, idServicoParaEditar);
            ResultSet resultado = statement.executeQuery();

            if (resultado.next()) {
                int ID_servico = resultado.getInt("ID_servico");
                String descricao = resultado.getString("descricao");
                Date data_servico = resultado.getDate("data_servico");
                String CPF = resultado.getString("CPF");

                JPanel panel = new JPanel(new GridLayout(4, 2));
                panel.add(new JLabel("ID_servico:"));
                JTextField ID_servicoField = new JTextField(Integer.toString(ID_servico));
                ID_servicoField.setEditable(false); // Impede a edição do ID
                panel.add(ID_servicoField);
                panel.add(new JLabel("Descrição:"));
                JTextField descricaoField = new JTextField(descricao);
                panel.add(descricaoField);
                panel.add(new JLabel("Data:"));
                
                SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
                JFormattedTextField data_servicoField = new JFormattedTextField(dateFormat);
                data_servicoField.setValue(data_servico);
                panel.add(data_servicoField);

                panel.add(new JLabel("CPF:"));
                JTextField CPFField = new JTextField(CPF);
                panel.add(CPFField);

                int result = JOptionPane.showConfirmDialog(null, panel, "Editar serviço", JOptionPane.OK_CANCEL_OPTION);

                if (result == JOptionPane.OK_OPTION) {
                    String novoDescricao = descricaoField.getText();
                    String novaDataServicoStr = data_servicoField.getText();
                    String novoCPF = CPFField.getText();

                    Date novaDataServico = null;
                    try {
                        novaDataServico = new Date(dateFormat.parse(novaDataServicoStr).getTime());
                    } catch (ParseException e) {
                        e.printStackTrace();
                        JOptionPane.showMessageDialog(this, "Data inválida. Use o formato dd/MM/yyyy.", "Erro", JOptionPane.ERROR_MESSAGE);
                        return;
                    }

                    String updateSql = "UPDATE servico SET descricao = ?, data_servico = ?, CPF = ? WHERE ID_servico = ?";
                    PreparedStatement updateStatement = conexao.prepareStatement(updateSql);
                    updateStatement.setString(1, novoDescricao);
                    updateStatement.setDate(2, new java.sql.Date(novaDataServico.getTime()));
                    updateStatement.setString(3, novoCPF);
                    updateStatement.setString(4, idServicoParaEditar);

                    int linhasAfetadas = updateStatement.executeUpdate();

                    if (linhasAfetadas > 0) {
                        JOptionPane.showMessageDialog(this, "Dados do serviço atualizados com sucesso!");
                    } else {
                        JOptionPane.showMessageDialog(this, "Nenhum serviço foi atualizado. Verifique o ID do serviço.");
                    }

                    updateStatement.close();
                }
            } else {
                JOptionPane.showMessageDialog(this, "Serviço com ID especificado não encontrado.");
            }

            resultado.close();
            statement.close();
            conexao.close();
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Erro ao editar serviço.", "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }// TODO add your handling code here:
    }//GEN-LAST:event_jToggleButton8ActionPerformed

    private void jToggleButton13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton13ActionPerformed
      // Solicite ao usuário o ID do orçamento a ser editado
    String input = JOptionPane.showInputDialog("Digite o ID do orçamento a ser editado:");

    if (input != null) {
        String idOrcamentoParaEditar = input;

        // Consulte o banco de dados para obter os dados atuais do orçamento
        try {
            String url = "jdbc:mysql://localhost:3306/banco?user=root&password=";
            Connection conexao = DriverManager.getConnection(url);
            String sql = "SELECT * FROM orcamento WHERE ID_orcamento = ?";
            PreparedStatement statement = conexao.prepareStatement(sql);
            statement.setString(1, idOrcamentoParaEditar);
            ResultSet resultado = statement.executeQuery();

            if (resultado.next()) {
                int ID_orcamento = resultado.getInt("ID_orcamento");
                String valor_orcamento = resultado.getString("valor_orcamento");
                Date data_orcamento = resultado.getDate("data_orcamento");
                String ID_servico = resultado.getString("ID_servico");

                JPanel panel = new JPanel(new GridLayout(4, 2));
                panel.add(new JLabel("ID_orcamento:"));
                JTextField ID_orcamentoField = new JTextField(Integer.toString(ID_orcamento));
                ID_orcamentoField.setEditable(false); // Impede a edição do ID
                panel.add(ID_orcamentoField);
                panel.add(new JLabel("Valor:"));
                JTextField valorOrcamentoField = new JTextField(valor_orcamento);
                panel.add(valorOrcamentoField);
                panel.add(new JLabel("Data:"));
                
                SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
                JFormattedTextField data_orcamentoField = new JFormattedTextField(dateFormat);
                data_orcamentoField.setValue(data_orcamento);
                panel.add(data_orcamentoField);

                
                panel.add(new JLabel("ID_servico:"));
                JTextField ID_servicoField = new JTextField(ID_servico);
                panel.add(ID_servicoField);

                int result = JOptionPane.showConfirmDialog(null, panel, "Editar orçamento", JOptionPane.OK_CANCEL_OPTION);

                if (result == JOptionPane.OK_OPTION) {
                    String novoValorOrcamento = valorOrcamentoField.getText();
                    String novaDataOrcamentoStr = data_orcamentoField.getText();
                    String novoIDServico = ID_servicoField.getText();

                    Date novaDataOrcamento = null;
                    try {
                        novaDataOrcamento = new Date(dateFormat.parse(novaDataOrcamentoStr).getTime());
                    } catch (ParseException e) {
                        e.printStackTrace();
                        JOptionPane.showMessageDialog(this, "Data inválida. Use o formato dd/MM/yyyy.", "Erro", JOptionPane.ERROR_MESSAGE);
                        return;
                    }

                    String updateSql = "UPDATE orcamento SET valor_orcamento = ?, data_orcamento = ?, ID_servico = ? WHERE ID_orcamento = ?";
                    PreparedStatement updateStatement = conexao.prepareStatement(updateSql);
                    updateStatement.setString(1, novoValorOrcamento);
                    updateStatement.setDate(2, new java.sql.Date(novaDataOrcamento.getTime()));
                    updateStatement.setString(3, novoIDServico);
                    updateStatement.setString(4, idOrcamentoParaEditar);

                    int linhasAfetadas = updateStatement.executeUpdate();

                    if (linhasAfetadas > 0) {
                        JOptionPane.showMessageDialog(this, "Dados do orçamento atualizados com sucesso!");
                    } else {
                        JOptionPane.showMessageDialog(this, "Nenhum orçamento foi atualizado. Verifique o ID do orçamento.");
                    }

                    updateStatement.close();
                }
            } else {
                JOptionPane.showMessageDialog(this, "Orçamento com ID especificado não encontrado.");
            }

            resultado.close();
            statement.close();
            conexao.close();
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Erro ao editar orçamento.", "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }  // TODO add your handling code here:
    }//GEN-LAST:event_jToggleButton13ActionPerformed

    private void jToggleButton12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton12ActionPerformed
           // Solicite ao usuário o ID do pagamento a ser editado
    String input = JOptionPane.showInputDialog("Digite o ID do pagamento a ser editado:");

    if (input != null) {
        String idPagamentoParaEditar = input;

        // Consulte o banco de dados para obter os dados atuais do orçamento
        try {
            String url = "jdbc:mysql://localhost:3306/banco?user=root&password=";
            Connection conexao = DriverManager.getConnection(url);
            String sql = "SELECT * FROM pagamento WHERE ID_pagamento = ?";
            PreparedStatement statement = conexao.prepareStatement(sql);
            statement.setString(1, idPagamentoParaEditar);
            ResultSet resultado = statement.executeQuery();

            if (resultado.next()) {
                int ID_pagamento = resultado.getInt("ID_pagamento");
                Date data_pagamento = resultado.getDate("data_pagamento");
                String comprovante = resultado.getString("comprovante");
                String ID_orcamento = resultado.getString("ID_orcamento");

                JPanel panel = new JPanel(new GridLayout(4, 2));
                panel.add(new JLabel("ID_pagamento:"));
                JTextField ID_pagamentoField = new JTextField(Integer.toString(ID_pagamento));
                ID_pagamentoField.setEditable(false); // Impede a edição do ID
                panel.add(ID_pagamentoField);
                panel.add(new JLabel("Data:"));
                SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
                JFormattedTextField data_pagamentoField = new JFormattedTextField(dateFormat);
                data_pagamentoField.setValue(data_pagamento);
                panel.add(data_pagamentoField);

                
                panel.add(new JLabel("Comprovante:"));
                JTextField comprovanteField = new JTextField(comprovante);
                panel.add(comprovanteField);
                panel.add(new JLabel("ID_orcamento:"));
                JTextField orcamentoField = new JTextField(ID_orcamento);
                panel.add(orcamentoField);

                int result = JOptionPane.showConfirmDialog(null, panel, "Editar pagamento", JOptionPane.OK_CANCEL_OPTION);

                if (result == JOptionPane.OK_OPTION) {
                    String novoDataPagamentoStr = data_pagamentoField.getText();
                    String novoComprovante = comprovanteField.getText();
                    String novoIDOrcamento = orcamentoField.getText();

                    Date novoDataPagamento = null;
                    try {
                        novoDataPagamento = new Date(dateFormat.parse(novoDataPagamentoStr).getTime());
                    } catch (ParseException e) {
                        e.printStackTrace();
                        JOptionPane.showMessageDialog(this, "Data inválida. Use o formato dd/MM/yyyy.", "Erro", JOptionPane.ERROR_MESSAGE);
                        return;
                    }

                    String updateSql = "UPDATE pagamento SET data_pagamento = ?, comprovante = ?, ID_orcamento = ? WHERE ID_pagamento = ?";
                    PreparedStatement updateStatement = conexao.prepareStatement(updateSql);
                    updateStatement.setDate(1, new java.sql.Date(novoDataPagamento.getTime()));
                    updateStatement.setString(2,novoComprovante);
                    updateStatement.setString(3, novoIDOrcamento);
                    updateStatement.setString(4, idPagamentoParaEditar);

                    int linhasAfetadas = updateStatement.executeUpdate();

                    if (linhasAfetadas > 0) {
                        JOptionPane.showMessageDialog(this, "Dados do pagamento atualizados com sucesso!");
                    } else {
                        JOptionPane.showMessageDialog(this, "Nenhum pagamento foi atualizado. Verifique o ID do orçamento.");
                    }

                    updateStatement.close();
                }
            } else {
                JOptionPane.showMessageDialog(this, "Pagamento com ID especificado não encontrado.");
            }

            resultado.close();
            statement.close();
            conexao.close();
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Erro ao editar pagamento.", "Erro", JOptionPane.ERROR_MESSAGE);
        }
    } // TODO add your handling code here:
    }//GEN-LAST:event_jToggleButton12ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AltView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AltView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AltView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AltView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AltView().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JToggleButton jToggleButton1;
    private javax.swing.JToggleButton jToggleButton10;
    private javax.swing.JToggleButton jToggleButton11;
    private javax.swing.JToggleButton jToggleButton12;
    private javax.swing.JToggleButton jToggleButton13;
    private javax.swing.JToggleButton jToggleButton2;
    private javax.swing.JToggleButton jToggleButton3;
    private javax.swing.JToggleButton jToggleButton4;
    private javax.swing.JToggleButton jToggleButton5;
    private javax.swing.JToggleButton jToggleButton6;
    private javax.swing.JToggleButton jToggleButton7;
    private javax.swing.JToggleButton jToggleButton8;
    private javax.swing.JToggleButton jToggleButton9;
    // End of variables declaration//GEN-END:variables
}
